# -----------------------------------------------------------------------------
# アジャイル要求リスト: wind-compass
# Version: 1.0
# -----------------------------------------------------------------------------

# =============================================================================
# 1. エピック候補 (Epics)
# =============================================================================
epics:
  - id: "EPIC-01"
    title: "MVPシミュレーションコア"
    description: "まず動く、中核的な計算エンジンと基本的な入出力を実現する、製品の核となる価値の塊。"

  - id: "EPIC-02"
    title: "高度な分析とレポート機能"
    description: "基本機能の上に、より詳細な分析や多様な出力形式を可能にする、ユーザー体験を向上させる機能群。"

  - id: "EPIC-03"
    title: "開発・運用基盤"
    description: "プロジェクトの品質と効率を支えるための、直接的なユーザー価値はないが不可欠な技術的タスク群。"


# =============================================================================
# 2. ユーザーストーリー (User Stories)
# =============================================================================
user_stories:
  - id: "US-001"
    story: |
      データ分析者として、まずは1つのシナリオ（固定角度と変速比の組み合わせ）で年間発電量を知りたい。
      それは、このツールが基本的な計算を正しく行えるかを確認し、最初のあたりをつけるためだ。
    acceptance_criteria:
      - "AC-01-01: 1つの固定角度と1つの変速比、風況データ、設備コンフィグファイルを指定してコマンドを実行すると、エラーなく処理が完了する。"
      - "AC-01-02: 計算結果として、そのシナリオの年間総発電量（kWh）が画面（標準出力）に表示される。"
      - "AC-01-03: 有効風速の計算（cos(θ)補正、背面からの風は0）が正しく行われていることが、ユニットテストで証明されている。"
    references: ["FR-001", "FR-002", "FR-003"]
    epic: "EPIC-01"
    metadata:
      layers: ["Domain", "UseCase", "Adapter-UI", "Adapter-DB"]
      story_points: 8
      dependencies: ["TASK-001", "TASK-002"]
    notes: "このストーリーは、システムの心臓部を実装する最初の大きな価値の塊です。"

  - id: "US-002"
    story: |
      データ分析者として、複数のシナリオ（固定角度と変速比の組み合わせ）を一括でシミュレーションしたい。
      それは、どの組み合わせが最も発電効率が良いか、手作業なしで素早く比較検討するためだ。
    acceptance_criteria:
      - "AC-02-01: 複数の固定角度（例: 北, 東）と複数の変速比（例: 5, 8）を指定して実行すると、全ての組み合わせ（例: 4シナリオ）が計算される。"
      - "AC-02-02: 計算結果として、全シナリオの年間発電量を含むマトリクス形式の表が画面に出力される。"
    references: ["FR-002", "FR-004", "UC-001"]
    epic: "EPIC-01"
    metadata:
      layers: ["UseCase", "Adapter-UI"]
      story_points: 3
      dependencies: ["US-001"]
    notes: "US-001の計算ロジックをループさせ、結果を整形する機能。"

  - id: "US-003"
    story: |
      データ分析者として、異なる設備特性コンフィグファイルを指定して、シミュレーション結果がどう変わるかを見たい。
      それは、どのメーカーの風車モデルが、特定の土地の風況に最も適しているかを比較するためだ。
    acceptance_criteria:
      - "AC-03-01: 異なる内容の設備特性コンフィグファイル（例: model_A.json, model_B.json）をそれぞれ指定して実行すると、異なる発電量の結果が出力される。"
      - "AC-03-02: コンフィグファイルの構造が不正な場合（例: 必須キーの欠如）、エラーメッセージを出力して処理を中断する。"
    references: ["FR-001"]
    epic: "EPIC-01"
    metadata:
      layers: ["Adapter-DB", "Domain"]
      story_points: 2
      dependencies: ["US-001"]

  - id: "US-004"
    story: |
      データ分析者として、比較レポートをCSVファイルとして保存したい。
      それは、Excelなどの他のツールでさらに詳細な分析やグラフ作成を行いたいためだ。
    acceptance_criteria:
      - "AC-04-01: コマンド実行時に出力ファイルパス（例: --output-csv report.csv）を指定すると、マトリクス表と同じ内容のCSVファイルが生成される。"
      - "AC-04-02: 出力パスを省略した場合は、ファイルは生成されず、従来通り画面表示のみとなる。"
    references: ["FR-004 (オプション)"]
    epic: "EPIC-02"
    metadata:
      layers: ["Adapter-UI", "UseCase"]
      story_points: 2
      dependencies: ["US-002"]

  - id: "US-005"
    story: |
      データ分析者として、比較レポートをグラフ画像として保存したい。
      それは、結果を視覚的に理解し、レポートやプレゼンテーションに簡単に貼り付けられるようにするためだ。
    acceptance_criteria:
      - "AC-05-01: コマンド実行時にグラフ出力オプション（例: --output-graph report.png）を指定すると、結果をまとめたグラフ（レーダーチャートまたは棒グラフ）が画像ファイルとして生成される。"
      - "AC-05-02: グラフの種類（レーダー/棒）を選択できるオプションがある。"
    references: ["FR-004 (オプション)"]
    epic: "EPIC-02"
    metadata:
      layers: ["Adapter-UI", "UseCase"]
      story_points: 5
      dependencies: ["US-002"]
    notes: "グラフ描画ライブラリの選定と導入が必要。"

# =============================================================================
# 3. 技術的タスク / 検討事項 (Technical Tasks / Spikes)
# =============================================================================
technical_tasks:
  - id: "TASK-001"
    title: "プロジェクトの初期セットアップ"
    description: |
      Gitリポジトリの作成、開発言語（Python 3.9+）のバージョン統一、仮想環境（venvなど）の設定、
      パッケージ管理（pip/Poetry）の方針決定、基本的なライブラリ（Pandasなど）の導入を行う。
    references: ["constraints_and_assumptions"]
    epic: "EPIC-03"
    metadata:
      layers: ["Infrastructure"]
      story_points: 2
      dependencies: []
    notes: "全てのタスクがこのタスクに依存する。"

  - id: "TASK-002"
    title: "アーキテクチャ設計と実装"
    description: |
      クリーンアーキテクチャに基づいたディレクトリ構造と、各レイヤーのインターフェースを定義・実装する。
      特に、インフラ層（ファイルI/Oなど）を抽象化するポート（インターフェース）を定義する。
    references: ["NFR (保守性/拡張性)"]
    epic: "EPIC-03"
    metadata:
      layers: ["Domain", "UseCase", "Adapter-UI", "Adapter-DB"]
      story_points: 3
      dependencies: ["TASK-001"]

  - id: "TASK-003"
    title: "CLI（コマンドラインインターフェース）の骨格実装"
    description: |
      ClickまたはArgparseを導入し、ファイルパスやシナリオパラメータを受け取るための引数とオプションを定義する。
      ヘルプメッセージ（-h, --help）が自動生成され、利用者が使い方を確認できるようにする。
    references: ["NFR (UI/UX)"]
    epic: "EPIC-02"
    metadata:
      layers: ["Adapter-UI"]
      story_points: 3
      dependencies: ["TASK-001"]

  - id: "TASK-004"
    title: "性能ベンチマークテストの作成と実施"
    description: |
      1年分（約5万行）のダミーデータと16シナリオのテストケースを作成する。
      CI/CDパイプラインに組み込み、定期的に実行して性能劣化を検知できるようにする。
    references: ["NFR (性能)"]
    epic: "EPIC-03"
    metadata:
      layers: ["Infrastructure"]
      story_points: 3
      dependencies: ["US-002"]

# =============================================================================
# プロダクトオーナーとしての補足と質問
# =============================================================================
# チームの皆さん、このリストは私たちの出発点です。
# これを見て、プロダクトの全体像と提供したい価値について理解を深めていただければと思います。
# 開発をスムーズに進め、手戻りをなくすため、いくつか皆さんと一緒に考えたいことがあります。
# 特に価値の優先順位付けについて、ご意見をお聞かせください。
#
# 1. ミニマムな価値（MVP）について:
#    最初のリリースでユーザーに価値を届けるために、最低限どの機能が必要だと思いますか？
#    例えば、「まず1シナリオだけでも完璧に計算できること(US-001)」と
#    「計算は粗くてもいいから複数のシナリオを比較できること(US-002の簡易版)」では、
#    どちらが最初のステップとして価値が高いでしょうか？
#
# 2. オプション機能の優先度:
#    レポートのCSV出力(US-004)やグラフ出力(US-005)は、「あると便利」な機能です。
#    これらは最初のリリースに含めるべき必須機能でしょうか？
#    それとも、コアな計算機能が安定した後の、次のイテレーションで取り組む形で問題ないでしょうか？
#
# 3. 技術的な不確実性について:
#    特にグラフ描画(US-005)や性能テスト(TASK-004)には、調査や試行錯誤が必要かもしれません。
#    これらのタスクについて、現時点で感じるリスクや懸念事項があれば教えてください。
#
# これらの対話を通じて、最初のスプリントで取り組むべき、最も価値の高いバックログアイテムを一緒に決めていきましょう。