# -----------------------------------------------------------------------------
# プロジェクト設定 & Issues: wind-compass
# Version: 1.0
# -----------------------------------------------------------------------------
project_name: "wind-compass"
version: "1.0"

# =============================================================================
# 1. マイルストーン (Milestones)
# =============================================================================
milestones:
  - title: "v0.1: MVPリリース"
    description: "中核となるシミュレーション機能を完成させ、ユーザーが基本的な単一・複数シナリオの分析をCLIで実行できる状態を目指します。"
    state: "open"
  - title: "v0.2: レポート機能強化"
    description: "MVPの機能に加え、結果をCSVやグラフ画像としてファイル出力できるようにし、分析の幅を広げます。"
    state: "open"
  - title: "継続的改善 (Continuous Improvement)"
    description: "特定の機能リリースに紐付かない、性能改善、リファクタリング、CI/CD強化など、プロダクトの健全性を維持するためのタスクを管理します。"
    state: "open"

# =============================================================================
# 2. ラベル (Labels)
# =============================================================================
labels:
  # --- Type Labels ---
  - name: "type: user-story"
    description: "ユーザーに直接的な価値を提供する機能要件。"
    color: "0075ca" # Blue
  - name: "type: technical-task"
    description: "機能実装に必要な技術的な作業。"
    color: "d73a4a" # Red
  - name: "type: chore"
    description: "ビルドや設定など、直接的な価値はないが必要な作業。"
    color: "cfd3d7" # Grey
  - name: "type: spike"
    description: "技術的な調査や検証のためのタスク。"
    color: "8a63d2" # Purple
  - name: "type: test"
    description: "テストコードの追加・改善に関するタスク。"
    color: "f9d0c4" # Light Red
  - name: "type: documentation"
    description: "ドキュメント作成・更新に関するタスク。"
    color: "d4c5f9" # Light Purple
  # --- Layer Labels (Clean Architecture) ---
  - name: "layer: domain"
    description: "ドメインモデルとビジネスロジックに関するレイヤー。"
    color: "0e8a16" # Dark Green
  - name: "layer: usecase"
    description: "アプリケーション固有のビジネスルールを実装するレイヤー。"
    color: "238636" # Green
  - name: "layer: adapter-ui"
    description: "UI（CLIなど）に関するアダプターレイヤー。"
    color: "a2eeef" # Light Blue
  - name: "layer: adapter-data"
    description: "データ永続化（ファイルI/Oなど）に関するアダプターレイヤー。"
    color: "3fb950" # Light Green
  - name: "layer: infrastructure"
    description: "CI/CD、実行環境、外部ライブラリなどに関するレイヤー。"
    color: "f69d5b" # Orange
  # --- Epic Labels ---
  - name: "epic: mvp-core"
    description: "EPIC-01: MVPシミュレーションコアに関連するIssue。"
    color: "7057ff" # Violet
  - name: "epic: reporting"
    description: "EPIC-02: 高度な分析とレポート機能に関連するIssue。"
    color: "7057ff" # Violet
  - name: "epic: foundation"
    description: "EPIC-03: 開発・運用基盤に関連するIssue。"
    color: "7057ff" # Violet
  # --- Principle Labels ---
  - name: "principle: TDD"
    description: "テスト駆動開発を特に意識すべきIssue。"
    color: "ffa500" # Orange
  - name: "principle: DDD"
    description: "ドメイン駆動設計の概念を特に意識すべきIssue。"
    color: "ffa500" # Orange
  # --- Priority Labels ---
  - name: "priority: high"
    description: "優先度が高いIssue。"
    color: "b60205" # Dark Red
  - name: "priority: medium"
    description: "優先度が中程度のIssue。"
    color: "fbca04" # Yellow
  - name: "priority: low"
    description: "優先度が低いIssue。"
    color: "0e8a16" # Dark Green
  # --- Status Labels ---
  - name: "status: needs-discussion"
    description: "実装前にチームでの議論が必要なIssue。"
    color: "bfd4f2" # Light Blue
  - name: "status: blocked"
    description: "他のIssueにブロックされているIssue。"
    color: "000000" # Black

# =============================================================================
# 3. GitHub Issues
# =============================================================================
github_issues:
  - title: "[Chore] プロジェクトの初期セットアップ (TASK-001)"
    description: |
      開発を開始するための基本的な環境をセットアップする。(アジャイル要求リスト TASK-001 参照)
    tasks:
      - "[x] 依存関係を `requirements.txt` (本番用) と `requirements-dev.txt` (開発用) に定義"
      - "[x] `pytest` をテストフレームワークとして導入し、`pyproject.toml` でテスト探索パスとカバレッジ計測を基本設定"
      - "[x] `pytest` の設定を検証するためのプレースホルダーテスト (`tests/test_placeholder.py`) を実装"
      - "[x] (議論事項) 当初計画のPoetryやリンターは、開発速度を優先するため、今回は見送ることを決定"
    acceptance_criteria:
      - "`poetry install`で開発環境が構築できること。"
      - "`git commit`時にリンターとフォーマッターが自動実行されること。"
    metadata:
      related_requirement: "TASK-001"
      depends_on: []
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: chore"
        - "epic: foundation"
        - "layer: infrastructure"
        - "priority: high"

  - title: "[Task] クリーンアーキテクチャのディレクトリ構造とインターフェース定義 (TASK-002)"
    description: |
      保守性とテスト容易性の高いコードベースを維持するため、クリーンアーキテクチャに基づいたプロジェクトの骨格を実装する。(アジャイル要求リスト TASK-002 参照)
    tasks:
      - "[x] `src/wind_compass`内に、クリーンアーキテクチャのレイヤーに対応する`domain`, `use_cases`, `adapters`の各ディレクトリを作成した。"
      - "[x] `domain`レイヤーに、将来のドメインモデルのプレースホルダとして`models.py`を配置した。"
      - "[x] `use_cases`レイヤーに、データ永続化層との契約となるポート（インターフェース）を定義する`ports.py`を配置した。"
      - "[x] `ports.py`内に、抽象基底クラスとして`WindDataReader`と`PowerPlantModelReader`を定義した。"
      - "[x] 上記のアーキテクチャ定義を検証する単体テスト (`tests/test_architecture.py`) を実装した。"
    acceptance_criteria:
      - "ディレクトリ構造がチームでレビューされ、合意されていること。"
      - "リポジトリインターフェースの定義が完了していること。"
    metadata:
      related_requirement: "TASK-002"
      depends_on:
        - "TASK-001" # Dependency expressed as ID
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "epic: foundation"
        - "layer: domain"
        - "layer: usecase"
        - "layer: adapter-data"
        - "priority: high"

  - title: "[Task][Domain] コア計算ドメインモデルの実装 (TASK-003A)"
    description: |
      ユーザーストーリー`US-001`の核となる、最終確定版の計算ロジック（風車パワーカーブ、伝達効率、発電機トルク特性カーブによる回転数算出、発電機電流特性カーブによる最終電力算出）のためのドメインモデルとビジネスロジックをTDDで実装する。(アジャイル要求リスト TASK-003A 参照)
    tasks:
      - "[x] `domain/constants.py` に物理定数・変換係数（`RPM_TO_RAD_PER_SEC`）を定義"
      - "[x] 値オブジェクト (`Power`, `Energy`, `Torque`, `EffectiveWindSpeed`, `WindReading`) を `domain/models.py` に実装 (不変性、型安全性考慮)"
      - "[x] `PolynomialCurve` クラスを `domain/models.py` に実装 (多項式表現、`__post_init__`でのバリデーション含む)"
      - "[x] `PowerPlantModel` クラスを `domain/models.py` に実装 (3つの特性カーブ保持、`__post_init__`でのバリデーション含む)"
      - "[x] `PowerGenerationSimulator` ドメインサービスを `domain/services.py` に実装し、以下の計算ロジックをカプセル化:"
      - "[x]   有効風速計算ロジック (追い風の場合は0とする仕様を反映)"
      - "[x]   風車パワーカーブからのタービン電力計算ロジック"
      - "[x]   伝達効率を適用した発電機軸への伝達電力計算ロジック"
      - "[x]   トルク特性カーブを用いた発電機回転数算出ロジック (`numpy.roots`による4次方程式解法、複数解の場合は最小値選択、不適切解は0とする仕様を反映)"
      - "[x]   発電機電流特性カーブと回転数からの電流計算ロジック"
      - "[x]   電流と電圧からの最終電力計算ロジック"
      - "[x]   カットイン回転数判定ロジック"
      - "[x] 上記すべてのクラス/関数に対する単体テストを作成し、ドメインレイヤーで97.4%のカバレッジを達成 (正常系、境界値、異常系をカバー)"
    acceptance_criteria:
      - "`US-001`の`AC-01-03`をドメインレベルで満たすこと。"
      - "既知の入力パラメータセットに対する計算結果が、手計算またはリファレンス実装と一致すること。"
      - "ドメインレイヤーのテストカバレッジが95%以上であること。"
    metadata:
      related_requirement: "TASK-003A" # Also related to US-001
      depends_on:
        - "TASK-002"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "layer: domain"
        - "epic: mvp-core"
        - "principle: DDD"
        - "principle: TDD"
        - "priority: high"

  - title: "[Task][Adapter-Data] データI/Oアダプタの実装 (TASK-004)"
    description: |
      最終確定した入力データ仕様に基づき、風況データCSVファイルと設備特性コンフィグファイルを読み込むアダプタを`adapter-data`レイヤーに実装する。(アジャイル要求リスト TASK-004 参照)
    tasks:
      - "[x] `CsvWindDataReader`クラスを`adapter-data`レイヤーに実装し、`WindDataReader`ポートを実装"
      - "[x] CSV読み込みにPandasを利用し、ベクトル化演算（`to_datetime`, `astype`）でパフォーマンスを確保"
      - "[x] `JsonConfigReader`クラスを`adapter-data`レイヤーに実装し、`PowerPlantModelReader`ポートを実装"
      - "[x] JSONキーをクラス内定数として定義し、可読性と保守性を向上"
      - "[x] ファイルI/Oに関する具体的なエラー（`FileNotFoundError`, `pd.errors.ParserError`, `json.JSONDecodeError`, `KeyError`等）を適切にハンドリングする処理を実装"
      - "[x] 上記2クラスの正常系・異常系を網羅する結合テストを`pytest`で実装"
    acceptance_criteria:
      - "指定したCSV/JSONファイルから、ドメインモデルや値オブジェクトを正しく生成できること。"
      - "不正なファイル（カラム不足、型不一致など）に対するエラーハンドリングがテストされていること。"
    metadata:
      related_requirement: "TASK-004" # Also related to US-001, US-003
      depends_on:
        - "TASK-002"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "layer: adapter-data"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 単一シナリオ実行ユースケースの実装 (US-001)"
    description: |
      ユーザーストーリー `US-001` を実現するためのユースケース（Interactor）を実装する。ドメインモデルとデータアダプタを統合し、単一シナリオのシミュレーションを実行し、結果を返す責務を持つ。(アジャイル要求リスト US-001 参照)
    tasks:
      - "[x] `use_cases.dtos` モジュールに、入力DTO `SingleScenarioInputDTO`（風況データパス、設定ファイルパス、タービン角度、効率、電圧、カットインRPMをフィールドに持つ）及び出力DTO `SingleScenarioOutputDTO`（年間発電量kWhをフィールドに持つ）を定義 (旧`gear_ratio`は削除)。"
      - "[x] `use_cases` レイヤーに `RunSingleSimulationScenarioUseCase` を実装:"
      - "[x]   `WindDataReader` および `PowerPlantModelReader` インターフェースを介して、それぞれ風況データと設備モデルをロード。"
      - "[x]   `PowerGenerationSimulator` ドメインサービス（ファクトリ経由で生成）を呼び出し、各風況データに対する瞬時発電電力を計算。"
      - "[x]   `domain.constants.DEFAULT_TIME_INTERVAL_HOURS` (10分間隔) を使用して瞬時発電電力を積算し、年間総発電量(kWh)として `SingleScenarioOutputDTO` にマッピング。"
      - "[x]   ファイルI/Oエラー (`FileNotFoundError`)、データ形式不正エラー (`ValueError`)、その他の予期せぬ例外を捕捉し、`ApplicationError` にラップして再送出するエラーハンドリングを実装。"
      - "[x] `domain.constants` に年間発電量計算用の時間間隔 `DEFAULT_TIME_INTERVAL_HOURS` を定義。"
      - "[x] `domain.models.PolynomialCurve` の `__post_init__` に、係数リスト `coeffs` が4要素であることを強制するバリデーションを追加。"
      - "[x] 新規追加・修正されたクラスおよびメソッドにDocstringを付与し、型ヒントを具体化。"
      - "[x] `tests/use_cases/test_run_single_scenario.py` に、`RunSingleSimulationScenarioUseCase` の正常系・異常系を網羅する単体テストを実装 (モック使用、カバレッジ100%達成)。"
      - "[x] `PolynomialCurve` の仕様変更に伴い、`tests/domain/test_models.py` および `tests/domain/test_services.py` の関連テストを修正・追加し、全テストPASSを達成。"
    acceptance_criteria:
      - "`US-001`の`AC-01-01`および`AC-01-02`が、CLIとの最終的な結合を除いて、ユースケースレベルで満たされていること。"
      - "ユニットテストで、ユースケースがドメインサービスやリポジトリインターフェースと正しく連携していることを確認できること。"
    metadata:
      related_requirement: "US-001"
      depends_on:
        - "TASK-003A"
        - "TASK-004"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: usecase"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 複数シナリオ実行とCLI統合 (US-002)"
    description: |
      ユーザーストーリー `US-002` を実現するため、単一シナリオ実行機能を拡張し、複数のシナリオを一括で実行できるようにする。また、CLIから操作できるように全体を統合する。(アジャイル要求リスト US-002 参照)
    tasks:
      - "[x] `Click`ライブラリを用いて、コマンドライン引数（ファイルパス、複数の固定角度、効率、電圧、カットインRPM）を解析する処理を`adapter-ui`レイヤーに実装した（`--gear-ratios`オプションはスコープ外として削除）。"
      - "[x] `RunMultipleSimulationScenariosUseCase`を実装し、指定された複数の固定角度について`RunSingleSimulationScenarioUseCase`を呼び出すように修正した（変速比の組み合わせは除外）。"
      - "[x] 全シナリオの結果（角度ごと）をマトリクス形式の表として整形する`ConsolePresenter`クラスを`adapter-ui`レイヤーに実装した。"
      - "[x] 依存性注入(DI)のため、エントリーポイント(`__main__.py`)でコンポーネントをインスタンス化し、`adapters/ui/cli.py`の`get_simulate_command`ファクトリ関数経由でコマンドに注入する構成を実装した。"
      - "[x] E2Eテストを作成し、コマンド実行から角度ごとの結果表示までを確認するように修正した（変速比関連の検証は削除）。"
    acceptance_criteria:
      - "`US-002`の`AC-02-01`および`AC-02-02`を満たすこと。"
      - "CLIで`-h`または`--help`オプションにより、コマンドの使い方が表示されること。"
    metadata:
      related_requirement: "US-002" # Also related to TASK-003B
      depends_on:
        - "US-001"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: usecase"
        - "layer: adapter-ui"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 設備モデル差し替えによる比較シミュレーション (US-003)"
    description: |
      ユーザーストーリー `US-003` を実装し、異なる設備特性コンフィグファイルを指定してシミュレーション結果を比較できるようにする。(アジャイル要求リスト US-003 参照)
    tasks:
      - "[x] `src/wind_compass/adapters/data_readers.py` の `JsonConfigReader` に、設備特性コンフィグファイルのスキーマ検証ロジック（必須キー、coeffsの型・要素数など）を追加。"
      - "[x] `JsonConfigReader` のエラーハンドリングを改善し、`json.JSONDecodeError` や `OSError` をファイルパス情報を含む `ValueError` にラップして再送出するように修正。"
      - "[x] `tests/adapters/test_data_readers.py` の `TestJsonConfigReader` に、上記のバリデーション強化に対応する単体テストケースを追加（既存テストで多くをカバー）。"
      - "[x] `tests/use_cases/test_run_single_scenario_compare_config.py` に、異なる有効なコンフィグファイル (`valid_config.json`, `valid_config_B.json`) と強風データ (`valid_wind_data_strong.csv`) を使用して `RunSingleSimulationScenarioUseCase` を実行し、年間発電量が変動することを確認するテスト (`test_annual_power_generation_differs_between_configs_strong_wind`) を実装。"
      - "[x] 比較テスト用のテストフィクスチャ (`valid_config_B.json`, `valid_wind_data_strong.csv`) を `tests/fixtures/` に追加。"
      - "[ ] (確認事項) CLIで設備特性コンフィグファイルのパスを指定できる機能は、`US-002` での実装を前提とし、本Issueではユースケースレベルのテストでファイルパス指定の動作を確認。" # CLI直接実装はUS-002の範疇という申し送りを反映
    acceptance_criteria:
      - "`US-003`の`AC-03-01`および`AC-03-02`を満たすこと。"
    metadata:
      related_requirement: "US-003"
      depends_on:
        - "US-001" # Relies on the core simulation logic and config loading
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: adapter-data"
        - "layer: domain"
        - "epic: mvp-core"
        - "priority: medium"

  - title: "[UserStory] 比較レポートのCSVファイル出力 (US-004)"
    description: |
      ユーザーストーリー`US-004`を実装し、シミュレーション結果をCSVファイルとして保存できるようにする。(アジャイル要求リスト US-004 参照)
    tasks:
      - "[x] `src/wind_compass/cli.py` に `--output-csv <filepath>` コマンドラインオプションを追加。"
      - "[x] `src/wind_compass/adapters/csv_presenter.py` に、マトリクス形式のシミュレーション結果データをCSV形式で指定ファイルパスに書き出す `CsvPresenter` クラスを新規実装。"
      - "[x] `CsvPresenter` 内で、ファイルパス空の場合の `ValueError` 送出、ファイル書き込み時の `IOError` 等のエラーハンドリングを実装（コンソールへのエラーメッセージ出力）。"
      - "[x] `tests/adapters/test_csv_presenter.py` に `CsvPresenter` の単体テストを実装（正常系、空データ、不正パス初期化など、カバレッジ83%）。"
      - "[x] `cli.py` （ダミー実装）にて `--output-csv` オプション有無によるCSVファイル生成制御と内容を手動で確認。"
      - "[ ] (US-002依存) 自動化されたE2Eテスト（`--output-csv` オプションの有無によるファイル生成の確認など）は、`cli.py` の本格実装後に `US-002` と連携して整備予定。" # E2Eテストの申し送りを反映
    acceptance_criteria:
      - "`US-004`の`AC-04-01`および`AC-04-02`を満たすこと。"
    metadata:
      related_requirement: "US-004"
      depends_on:
        - "US-002"
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story"
        - "layer: adapter-ui"
        - "epic: reporting"
        - "priority: medium"

  - title: "[Spike] グラフ描画ライブラリの調査・選定 (US-005関連)"
    description: |
      ユーザーストーリー`US-005`で求められるグラフ描画機能を実現するため、最適なPythonライブラリを調査・選定する。(アジャイル要求リスト (旧)TASK-005 / US-005 参照)
    tasks:
      - "`Matplotlib`, `Seaborn`, `Plotly`などの候補ライブラリをリストアップする。"
      - "レーダーチャートと棒グラフの描画が容易か評価する。"
      - "画像ファイルとしての出力が簡単か、依存関係は重すぎないか評価する。"
      - "簡単なプロトタイプを作成し、チームにデモを行い、選定結果をドキュメント化する。"
    acceptance_criteria:
      - "チームが、`US-005`を実装するための技術選定に合意できること。"
      - "選定理由と簡単な使い方がドキュメント化されていること。"
    metadata:
      related_requirement: "US-005" # Relates to US-005
      depends_on: []
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: spike"
        - "epic: reporting"
        - "status: needs-discussion"
        - "priority: medium"

  - title: "[UserStory] 比較レポートのグラフ画像出力 (US-005)"
    description: |
      ユーザーストーリー`US-005`を実装し、シミュレーション結果をグラフ画像として保存できるようにする。(アジャイル要求リスト US-005 参照)
    tasks:
      - "(前提) `[Spike] グラフ描画ライブラリの調査・選定` が完了していること。"
      - "CLIに`--output-graph <filepath>`オプションと、グラフタイプ（例: `--graph-type radar/bar`）オプションを追加する。"
      - "`Presenter`（または新しい`GraphPresenter`）に、結果を選定したライブラリでグラフ化し、指定されたファイルパスに画像として保存する機能を追加する。"
      - "オプションが指定された場合のみ、ファイルが出力されることを確認するE2Eテストを追加する。"
    acceptance_criteria:
      - "`US-005`の`AC-05-01`および`AC-05-02`を満たすこと。"
    metadata:
      related_requirement: "US-005"
      depends_on:
        - "US-002"
        - "[Spike] グラフ描画ライブラリの調査・選定 (US-005関連)"
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story"
        - "layer: adapter-ui"
        - "epic: reporting"
        - "priority: medium"

  - title: "[Task] 性能ベンチマークテストの作成と実施 (TASK-005)"
    description: |
      1年分（約5万行）のダミーデータと16シナリオのテストケースを作成し、CI/CDパイプラインに組み込み、定期的に実行して性能劣化を検知できるようにする。(アジャイル要求リスト TASK-005 参照)
    tasks:
      - "性能測定用のベンチマークスクリプトを作成する。"
      - "1年分の現実的なダミー風況データと、複数の設備特性コンフィグファイルを作成する。"
      - "CI環境でベンチマークテストを実行し、実行時間を記録・比較できるようにする。"
      - "性能要件（例: 60秒以内）をクリアしていることを確認する。"
    acceptance_criteria:
      - "ベンチマークテストがCIで自動実行されること。"
      - "設定された性能目標をクリアしていること。"
    metadata:
      related_requirement: "TASK-005" # This is the ID from the Agile Requirements List
      depends_on:
        - "US-002" # Needs multiple scenario execution to be benchmarked
      milestone: "継続的改善 (Continuous Improvement)"
      labels:
        - "type: technical-task"
        - "layer: infrastructure"
        - "epic: foundation"
        - "priority: medium"

  - title: "[Refactor] RunSingleSimulationScenarioUseCase の統一 (TASK-006)"
    description: |
      現在 `src/wind_compass/use_cases/run_single_scenario.py` と `src/wind_compass/use_cases/simulation_use_cases.py` の2箇所に存在する `RunSingleSimulationScenarioUseCase` の実装を比較検討し、最適な形に統一する。
      エラーハンドリング戦略、時間間隔(Δt)の扱い(TASK-008での決定を反映)、依存性注入の方法も統一する。
      `adapters/ui/cli.py` が利用するユースケースを、この統一された実装に変更する。
    tasks:
      - "[ ] 両実装のメリット・デメリットを評価し、統一後のあるべき姿を設計する。"
      - "[ ] エラーハンドリングを `ApplicationError` に統一する (run_single_scenario.py 方式をベースに検討)。"
      - "[ ] 時間間隔(Δt)の扱いについて、TASK-008 の決定を反映する。"
      - "[ ] 依存性注入の方法を統一する (適切なファクトリやローダーのコンストラクタインジェクションを検討)。"
      - "[ ] 統一されたユースケースを実装し、既存のテストをパスするように修正・追加する。"
      - "[ ] `RunMultipleSimulationScenariosUseCase` が新しい統一ユースケースを利用するように修正する。"
      - "[ ] 不要になった古いユースケース実装を削除する。"
    acceptance_criteria:
      - "単一の `RunSingleSimulationScenarioUseCase` 実装がコードベースに存在する。"
      - "既存の単一シナリオおよび複数シナリオのE2Eテスト、ユニットテストがすべてパスする。"
      - "エラーハンドリング、Δtの扱い、DIが一貫性のある方法で実装されている。"
    metadata:
      related_requirement: "NFR (保守性)"
      depends_on:
        - "TASK-008" # Δtの仕様決定待ち
      milestone: "v0.2: レポート機能強化" # または新しいリファクタリングマイルストーン
      labels:
        - "type: technical-task"
        - "layer: usecase"
        - "layer: domain" # Δtの仕様により影響
        - "priority: high"
        - "status: needs-discussion" # 設計方針の議論が必要

  - title: "[Feature] CLI機能の強化とCSV出力オプションの統合 (US-006)"
    description: |
      主要なCLIエントリーポイント (`src/wind_compass/adapters/ui/cli.py` の `simulate` コマンド) に `--output-csv <filepath>` オプションを追加し、CSVファイル出力機能を統合する。
      `src/wind_compass/cli.py` のダミー実装は役割を終えるため、内容を整理し不要であれば削除する。
    tasks:
      - "[ ] `src/wind_compass/adapters/ui/cli.py` の `simulate` コマンドに `--output-csv` clickオプションを追加する。"
      - "[ ] オプションが指定された場合、統一されたユースケース (TASK-006) の実行結果を `CsvPresenter` を用いて指定ファイルパスに保存する処理を実装する。"
      - "[ ] `--output-csv` オプションに関するヘルプメッセージを更新する。"
      - "[ ] CSV出力機能に関するE2Eテストを追加・更新する。"
      - "[ ] `src/wind_compass/cli.py` の内容を見直し、不要であれば削除する。関連するREADME等の記述も更新する。"
    acceptance_criteria:
      - "CLIから `--output-csv` オプションを指定することで、シミュレーション結果がCSVファイルに出力される。"
      - "オプションが指定されない場合は、従来通りコンソール出力のみとなる。"
      - "不正なファイルパス指定時や書き込みエラー時のハンドリングが適切であること (CsvPresenterの既存機能と連携)。"
    metadata:
      related_requirement: "FR-004 (CSV出力)"
      depends_on:
        - "TASK-006" # 統一されたユースケースの利用
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story" # ユーザーに直接価値を提供
        - "layer: adapter-ui"
        - "epic: reporting" # レポート機能の一部
        - "priority: medium"

  - title: "[Chore] 年間発電量計算における時間間隔 (Δt) の仕様決定と実装統一 (TASK-008)"
    description: |
      年間発電量計算時の時間間隔 (Δt) の扱いについて、(A) 風況データの観測時刻 (`observed_at`) から都度推定する方式、(B) `domain/constants.py` の `DEFAULT_TIME_INTERVAL_HOURS` (固定値) を使用する方式、のどちらを正式な仕様とするか決定する。
      決定に基づき、関連するユースケース (`RunSingleSimulationScenarioUseCase`) およびドメインサービス (`PowerGenerationSimulator`、影響あれば) のロジックを修正・統一する。
      要件定義書 (FR-003) および関連ドキュメントの記述を更新する。
    tasks:
      - "[ ] Δtの扱いについて、(A)データから推定、(B)固定値、のメリット・デメリット、および要件定義書の記述「データから推定」の意図を再確認し、仕様を最終決定する。"
      - "[ ] 決定した仕様に基づき、`RunSingleSimulationScenarioUseCase` (TASK-006で統一されるもの) のΔt計算ロジックを実装/修正する。"
      - "[ ] 関連するユニットテストを修正・追加する。"
      - "[ ] `docs/requirement.yml` の FR-003 の記述を、決定した仕様に合わせて明確化する。"
    acceptance_criteria:
      - "Δtの扱いに関する仕様が明確に定義され、チーム内で合意されている。"
      - "ユースケースにおけるΔtの計算ロジックが決定した仕様に沿って統一されている。"
      - "関連ドキュメントの記述が最新の仕様と一致している。"
    metadata:
      related_requirement: "FR-003"
      depends_on: []
      milestone: "v0.2: レポート機能強化" # 仕様決定は早めに行う
      labels:
        - "type: chore" # 仕様決定とそれに伴う小規模修正
        - "layer: domain"
        - "layer: usecase"
        - "type: documentation"
        - "priority: high"
        - "status: needs-discussion"

  - title: "[Test] 性能ベンチマークテストの導入 (TASK-009)"
    description: |
      要件定義書NFRに記載された性能目標（1年分の風況データ、16シナリオで60秒以内）を継続的に確認するため、性能ベンチマークテストを導入する。
      (既存の `issues.yml` の `TASK-005` (性能ベンチマーク) を具体化・再定義)
    tasks:
      - "[ ] 性能測定用の大規模なダミー風況データ (約5万行) を生成または用意する。"
      - "[ ] 16シナリオを指定してCLIを実行し、全体の処理時間を計測するスクリプトを作成する。"
      - "[ ] (オプション) 計測結果を記録し、閾値を超えた場合に警告する仕組みを検討する (CI連携は別タスクでも可)。"
      - "[ ] ベンチマークテストの実行手順をドキュメント化する。"
    acceptance_criteria:
      - "定義された条件下で性能テストを実行し、処理時間を計測できる。"
      - "現在の実装が性能目標を満たしているか（または逸脱しているか）確認できる。"
    metadata:
      related_requirement: "NFR (performance)"
      depends_on:
        - "US-006" # 安定したCLI実行系が前提
      milestone: "継続的改善 (Continuous Improvement)"
      labels:
        - "type: test"
        - "layer: infrastructure"
        - "epic: foundation"
        - "priority: medium"

  - title: "[Spike] グラフ出力機能のためのライブラリ調査と仕様検討 (US-005 Spike 再定義) (TASK-010)"
    description: |
      ユーザーストーリー US-005 (グラフ画像出力) の実現に向け、適切なPythonグラフ描画ライブラリを調査・選定する。また、出力するグラフの種類や形式に関する具体的な仕様を検討する。
      (既存の `issues.yml` の `[Spike] グラフ描画ライブラリの調査・選定 (US-005関連)` を再定義・具体化)
    tasks:
      - "[ ] `Matplotlib`, `Seaborn`, `Plotly` 等の候補ライブラリについて、以下の観点で調査・比較する：レーダーチャート・棒グラフの描画容易性、画像ファイル出力の簡便さ、依存関係の重さ、ライセンス。"
      - "[ ] 複数の角度に対する年間発電量を比較するのに適したグラフ形式（例：角度ごとの棒グラフ、最適角度を示すレーダーチャート等）を検討する。"
      - "[ ] 簡単なプロトタイプを作成し、各ライブラリの使用感と出力品質を評価する。"
      - "[ ] 調査結果、推奨ライブラリ、および具体的なグラフ仕様案（何を表示するか、どのような見た目か）をドキュメントにまとめる。"
    acceptance_criteria:
      - "グラフ描画に使用するライブラリが選定されている。"
      - "出力するグラフの種類、表示項目、おおよそのデザインに関する仕様案が作成されている。"
      - "選定理由と仕様案がチーム内で共有され、合意形成の材料となる。"
    metadata:
      related_requirement: "US-005"
      depends_on: []
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: spike"
        - "epic: reporting"
        - "priority: medium"
        - "status: needs-discussion"

  - title: "[Feature] 比較レポートのグラフ画像出力機能の実装 (US-007)"
    description: |
      ユーザーストーリー US-005 (グラフ画像出力) を実現する。TASK-010 の調査結果に基づき、選択されたライブラリを使用して、シミュレーション結果を指定されたファイルパスにグラフ画像として保存する。
      (既存の `issues.yml` の `US-005` をID変更して再定義)
    tasks:
      - "[ ] CLIに `--output-graph <filepath>` オプションと、グラフタイプを指定するオプション（例: `--graph-type bar`）を追加する。"
      - "[ ] 新しい `GraphPresenter` クラスを作成するか、既存の `ConsolePresenter` を拡張し、TASK-010で決定した仕様に基づきグラフ描画処理を実装する。"
      - "[ ] 描画したグラフを指定されたファイルパスに画像として保存する機能を実装する。"
      - "[ ] オプションが指定された場合のみグラフファイルが生成されることを確認するE2Eテストを追加する。"
    acceptance_criteria:
      - "CLIから `--output-graph` およびグラフタイプオプションを指定することで、指定された形式のグラフ画像ファイルが出力される。"
      - "グラフの内容が、シミュレーション結果を正しく反映している。"
    metadata:
      related_requirement: "FR-004 (グラフオプション)"
      depends_on:
        - "TASK-010" # ライブラリ選定と仕様決定待ち
        - "US-006"   # 結果データが必要
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story"
        - "layer: adapter-ui"
        - "epic: reporting"
        - "priority: medium"

  - title: "[Chore] プロジェクトドキュメントの全体的な整合性向上と更新 (TASK-011)"
    description: |
      これまでの課題解決 (TASK-006, TASK-008, US-006など) による仕様変更や実装の更新内容を、`docs/requirement.yml`, `docs/project-define.md`, README.md等の関連ドキュメントに正確に反映し、ドキュメントとコードベースの整合性を保つ。
    tasks:
      - "[ ] `RunSingleSimulationScenarioUseCase` の統一内容をドキュメントに反映。"
      - "[ ] CLIのオプション変更（CSV出力統合など）をREADMEやヘルプメッセージの元となるドキュメントに反映。"
      - "[ ] Δtの仕様決定内容を `requirement.yml` (FR-003) や関連箇所に反映。"
      - "[ ] その他、軽微な記述の修正や最新化。"
    acceptance_criteria:
      - "主要なプロジェクトドキュメントが、現在のコードベースの仕様と一致している。"
      - "ドキュメント間の記述に矛盾がない。"
    metadata:
      related_requirement: "NFR (保守性)"
      depends_on: # 多くの修正タスク完了後
        - "TASK-006"
        - "US-006"
        - "TASK-008"
      milestone: "継続的改善 (Continuous Improvement)" # または各変更がマージされるタイミングで都度
      labels:
        - "type: documentation"
        - "priority: low"