# -----------------------------------------------------------------------------
# アジャイル要求リスト: wind-compass
# Version: 2.0 (要件定義書 v2.0 に基づく更新版)
# -----------------------------------------------------------------------------

# =============================================================================
# 1. エピック候補 (Epics)
# =============================================================================
epics:
  - id: "EPIC-01"
    title: "MVPシミュレーションコア"
    description: "まず動く、中核的な計算エンジンと基本的な入出力を実現する、製品の核となる価値の塊。"

  - id: "EPIC-02"
    title: "高度な分析とレポート機能"
    description: "基本機能の上に、より詳細な分析や多様な出力形式を可能にする、ユーザー体験を向上させる機能群。"

  - id: "EPIC-03"
    title: "開発・運用基盤"
    description: "プロジェクトの品質と効率を支えるための、直接的なユーザー価値はないが不可欠な技術的タスク群。"


# =============================================================================
# 2. ユーザーストーリー (User Stories)
# =============================================================================
user_stories:
  - id: "US-001"
    story: |
      データ分析者として、まずは1つのシナリオ（固定角度と変速比の組み合わせ）で年間発電量を知りたい。
      それは、このツールが基本的な計算を正しく行えるかを確認し、最初のあたりをつけるためだ。
    acceptance_criteria:
      - "AC-01-01: 1つの固定角度と1つの変速比、正しい形式の風況データ、3つの特性カーブ（パワー、トルク、電流）を含む設備コンフィグファイルを指定してコマンドを実行すると、エラーなく処理が完了する。"
      - "AC-01-02: 計算結果として、そのシナリオの年間総発電量（kWh）が画面（標準出力）に表示される。"
      - "AC-01-03: 有効風速の計算、P_turbineの計算、P_shaftの計算、トルクカーブを用いたR_genの算出、電流カーブを用いたI_genの算出、最終的なP_instの計算が、ユニットテストで証明されている。"
    references: ["FR-001 (v2.0)", "FR-002 (v2.0)", "FR-003 (v2.0)"]
    epic: "EPIC-01"
    metadata:
      layers: ["Domain", "UseCase", "Adapter-UI", "Adapter-Data"] # Adapter-Data (ファイルI/O)
      story_points: 8 # (計算ロジックの複雑化を考慮し、再見積もりが必要な可能性あり)
      dependencies: ["TASK-001", "TASK-002"]
    notes: "システムの心臓部。計算ロジックの正確性が最重要。"

  - id: "US-002"
    story: |
      データ分析者として、複数のシナリオ（固定角度と変速比の組み合わせ）を一括でシミュレーションしたい。
      それは、どの組み合わせが最も発電効率が良いか、手作業なしで素早く比較検討するためだ。
    acceptance_criteria:
      - "AC-02-01: 複数の固定角度と複数の変速比を指定して実行すると、全ての組み合わせシナリオが計算される。"
      - "AC-02-02: 計算結果として、全シナリオの年間発電量を含むマトリクス形式の表が画面に出力される。"
    references: ["FR-002 (v2.0)", "FR-004 (v2.0)", "UC-001 (v2.0)"]
    epic: "EPIC-01"
    metadata:
      layers: ["UseCase", "Adapter-UI"]
      story_points: 3
      dependencies: ["US-001"]
    notes: "US-001の計算ロジックをループさせ、結果を整形する機能。"

  - id: "US-003"
    story: |
      データ分析者として、異なる設備特性コンフィグファイルを指定して、シミュレーション結果がどう変わるかを見たい。
      それは、どのメーカーの風車モデルや発電機モデルが、特定の土地の風況に最も適しているかを比較するためだ。
    acceptance_criteria:
      - "AC-03-01: 異なる内容の設備特性コンフィグファイル（例: パワーカーブ、トルクカーブ、または電流カーブの係数を変更）をそれぞれ指定して実行すると、異なる発電量の結果が出力される。"
      - "AC-03-02: コンフィグファイルの構造が不正な場合（例: 必須キーの欠如、係数の数が不足など）、エラーメッセージを出力して処理を中断する。"
    references: ["FR-001 (v2.0)"]
    epic: "EPIC-01"
    metadata:
      layers: ["Adapter-Data", "Domain"]
      story_points: 2
      dependencies: ["US-001"]

  - id: "US-004"
    story: |
      データ分析者として、比較レポートをCSVファイルとして保存したい。
      それは、Excelなどの他のツールでさらに詳細な分析やグラフ作成を行いたいためだ。
    acceptance_criteria:
      - "AC-04-01: コマンド実行時に出力ファイルパス（例: --output-csv report.csv）を指定すると、マトリクス表と同じ内容のCSVファイルが生成される。"
      - "AC-04-02: 出力パスを省略した場合は、ファイルは生成されず、従来通り画面表示のみとなる。"
    references: ["FR-004 (オプション) (v2.0)"]
    epic: "EPIC-02"
    metadata:
      layers: ["Adapter-UI", "UseCase"]
      story_points: 2
      dependencies: ["US-002"]

  - id: "US-005"
    story: |
      データ分析者として、比較レポートをグラフ画像として保存したい。
      それは、結果を視覚的に理解し、レポートやプレゼンテーションに簡単に貼り付けられるようにするためだ。
    acceptance_criteria:
      - "AC-05-01: コマンド実行時にグラフ出力オプション（例: --output-graph report.png）を指定すると、結果をまとめたグラフ（レーダーチャートまたは棒グラフ）が画像ファイルとして生成される。"
      - "AC-05-02: グラフの種類（レーダー/棒）を選択できるオプションがある。"
    references: ["FR-004 (オプション) (v2.0)"]
    epic: "EPIC-02"
    metadata:
      layers: ["Adapter-UI", "UseCase"]
      story_points: 5
      dependencies: ["US-002"]
    notes: "グラフ描画ライブラリの選定と導入が必要。"

# =============================================================================
# 3. 技術的タスク / 検討事項 (Technical Tasks / Spikes)
# =============================================================================
technical_tasks:
  - id: "TASK-001"
    title: "プロジェクトの初期セットアップ"
    description: |
      Gitリポジトリの作成、開発言語（Python 3.9+）のバージョン統一、仮想環境（venvなど）の設定、
      パッケージ管理（pip/Poetry）の方針決定、基本的なライブラリ（Pandasなど）の導入を行う。
    references: ["constraints_and_assumptions (v2.0)"]
    epic: "EPIC-03"
    metadata:
      layers: ["Infrastructure"]
      story_points: 2
      dependencies: []
    notes: "全てのタスクがこのタスクに依存する。"

  - id: "TASK-002"
    title: "アーキテクチャ設計と実装"
    description: |
      クリーンアーキテクチャに基づいたディレクトリ構造と、各レイヤーのインターフェースを定義・実装する。
      特に、インフラ層（ファイルI/Oなど）を抽象化するポート（インターフェース）を定義する。
    references: ["NFR (保守性/拡張性) (v2.0)"]
    epic: "EPIC-03"
    metadata:
      layers: ["Domain", "UseCase", "Adapter-UI", "Adapter-Data"]
      story_points: 3
      dependencies: ["TASK-001"]

  - id: "TASK-003A" # (TASK-003 をドメインモデル実装タスクとして再定義)
    title: "[Domain] コア計算ドメインモデルの実装 (最終ロジック版)"
    description: |
      ユーザーストーリー`US-001`の核となる、最終確定版の計算ロジック（風車パワーカーブ、伝達効率、
      発電機トルク特性カーブによる回転数算出、発電機電流特性カーブによる最終電力算出）のための
      ドメインモデルとビジネスロジックをTDDで実装する。
    tasks:
      - "`WindReading`, `PowerPlantModel` (3つのカーブ係数を含む), `EffectiveWindSpeed`等の値オブジェクト定義。"
      - "発電機回転数を求める4次方程式の数値解法を含む `PowerGenerationSimulator` ドメインサービスの実装。"
      - "上記すべてのクラス/関数に対するユニットテスト（境界値、方程式の解がない場合等を含む）。"
    references: ["FR-003 (v2.0)", "計算ロジック定義 (最終確定版)"]
    epic: "EPIC-01"
    metadata:
      layers: ["Domain"]
      story_points: 5 # (ロジックの複雑化を考慮)
      dependencies: ["TASK-002"]
    notes: "数値計算ライブラリ(例: NumPy)の利用を検討。"

  - id: "TASK-003B" # (TASK-003 を CLI実装タスクとして再定義)
    title: "[Adapter-UI] CLI（コマンドラインインターフェース）の骨格実装"
    description: |
      ClickまたはArgparseを導入し、ファイルパスやシナリオパラメータ（固定角度、変速比）を受け取るための
      引数とオプションを定義する。ヘルプメッセージが自動生成されるようにする。
    references: ["NFR (UI/UX) (v2.0)"]
    epic: "EPIC-02" # (CLIはユーザーストーリーの実現に直接関わるため、コアな基盤よりこちら)
    metadata:
      layers: ["Adapter-UI"]
      story_points: 3
      dependencies: ["TASK-001"]

  - id: "TASK-004"
    title: "[Adapter-Data] データI/Oアダプタの実装 (最終データ仕様版)"
    description: |
      最終確定した入力データ仕様に基づき、風況データCSVファイルと設備特性コンフィグファイルを
      読み込むアダプタを`adapter-data`レイヤーに実装する。
    tasks:
      - "CSVリーダー: `observed_at`, `max_wind_speed_mps`, `max_wind_direction_deg` カラムを読み取る。"
      - "コンフィグリーダー: 3種類の多項式係数（パワー、トルク、電流）をJSONから読み取る。"
      - "ファイル不在、フォーマット不正時のエラーハンドリング実装。"
      - "結合テスト（テスト用ファイル使用）。"
    references: ["FR-001 (v2.0)", "constraints_and_assumptions (v2.0)"]
    epic: "EPIC-01"
    metadata:
      layers: ["Adapter-Data"]
      story_points: 3 # (読み込む情報が増えたため)
      dependencies: ["TASK-002"]

  - id: "TASK-005" # (旧TASK-004から名称変更)
    title: "性能ベンチマークテストの作成と実施"
    description: |
      1年分（約5万行）のダミーデータと16シナリオのテストケースを作成する。
      CI/CDパイプラインに組み込み、定期的に実行して性能劣化を検知できるようにする。
    references: ["NFR (性能) (v2.0)"]
    epic: "EPIC-03"
    metadata:
      layers: ["Infrastructure"]
      story_points: 3
      dependencies: ["US-002"] # (複数シナリオ実行機能に依存)

# =============================================================================
# プロダクトオーナーとしての補足と質問 (変更なし)
# =============================================================================
# (前回のプロダクトオーナーからの質問リストはそのまま流用します)