# -----------------------------------------------------------------------------
# プロジェクト設定 & Issues: wind-compass
# Version: 1.0
# -----------------------------------------------------------------------------
project_name: "wind-compass"
version: "1.0"

# =============================================================================
# 1. マイルストーン (Milestones)
# =============================================================================
milestones:
  - title: "v0.1: MVPリリース"
    description: "中核となるシミュレーション機能を完成させ、ユーザーが基本的な単一・複数シナリオの分析をCLIで実行できる状態を目指します。"
    state: "open"
  - title: "v0.2: レポート機能強化"
    description: "MVPの機能に加え、結果をCSVやグラフ画像としてファイル出力できるようにし、分析の幅を広げます。"
    state: "open"
  - title: "継続的改善 (Continuous Improvement)"
    description: "特定の機能リリースに紐付かない、性能改善、リファクタリング、CI/CD強化など、プロダクトの健全性を維持するためのタスクを管理します。"
    state: "open"

# =============================================================================
# 2. ラベル (Labels)
# =============================================================================
labels:
  # --- Type Labels ---
  - name: "type: user-story"
    description: "ユーザーに直接的な価値を提供する機能要件。"
    color: "0075ca" # Blue
  - name: "type: technical-task"
    description: "機能実装に必要な技術的な作業。"
    color: "d73a4a" # Red
  - name: "type: chore"
    description: "ビルドや設定など、直接的な価値はないが必要な作業。"
    color: "cfd3d7" # Grey
  - name: "type: spike"
    description: "技術的な調査や検証のためのタスク。"
    color: "8a63d2" # Purple
  - name: "type: test"
    description: "テストコードの追加・改善に関するタスク。"
    color: "f9d0c4" # Light Red
  - name: "type: documentation"
    description: "ドキュメント作成・更新に関するタスク。"
    color: "d4c5f9" # Light Purple
  # --- Layer Labels (Clean Architecture) ---
  - name: "layer: domain"
    description: "ドメインモデルとビジネスロジックに関するレイヤー。"
    color: "0e8a16" # Dark Green
  - name: "layer: usecase"
    description: "アプリケーション固有のビジネスルールを実装するレイヤー。"
    color: "238636" # Green
  - name: "layer: adapter-ui"
    description: "UI（CLIなど）に関するアダプターレイヤー。"
    color: "a2eeef" # Light Blue
  - name: "layer: adapter-data"
    description: "データ永続化（ファイルI/Oなど）に関するアダプターレイヤー。"
    color: "3fb950" # Light Green
  - name: "layer: infrastructure"
    description: "CI/CD、実行環境、外部ライブラリなどに関するレイヤー。"
    color: "f69d5b" # Orange
  # --- Epic Labels ---
  - name: "epic: mvp-core"
    description: "EPIC-01: MVPシミュレーションコアに関連するIssue。"
    color: "7057ff" # Violet
  - name: "epic: reporting"
    description: "EPIC-02: 高度な分析とレポート機能に関連するIssue。"
    color: "7057ff" # Violet
  - name: "epic: foundation"
    description: "EPIC-03: 開発・運用基盤に関連するIssue。"
    color: "7057ff" # Violet
  # --- Principle Labels ---
  - name: "principle: TDD"
    description: "テスト駆動開発を特に意識すべきIssue。"
    color: "ffa500" # Orange
  - name: "principle: DDD"
    description: "ドメイン駆動設計の概念を特に意識すべきIssue。"
    color: "ffa500" # Orange
  # --- Priority Labels ---
  - name: "priority: high"
    description: "優先度が高いIssue。"
    color: "b60205" # Dark Red
  - name: "priority: medium"
    description: "優先度が中程度のIssue。"
    color: "fbca04" # Yellow
  - name: "priority: low"
    description: "優先度が低いIssue。"
    color: "0e8a16" # Dark Green
  # --- Status Labels ---
  - name: "status: needs-discussion"
    description: "実装前にチームでの議論が必要なIssue。"
    color: "bfd4f2" # Light Blue
  - name: "status: blocked"
    description: "他のIssueにブロックされているIssue。"
    color: "000000" # Black

# =============================================================================
# 3. GitHub Issues
# =============================================================================
github_issues:
  - title: "[Chore] プロジェクトの初期セットアップ (TASK-001)"
    description: |
      開発を開始するための基本的な環境をセットアップする。(アジャイル要求リスト TASK-001 参照)
    tasks:
      - "[x] 依存関係を `requirements.txt` (本番用) と `requirements-dev.txt` (開発用) に定義"
      - "[x] `pytest` をテストフレームワークとして導入し、`pyproject.toml` でテスト探索パスとカバレッジ計測を基本設定"
      - "[x] `pytest` の設定を検証するためのプレースホルダーテスト (`tests/test_placeholder.py`) を実装"
      - "[x] (議論事項) 当初計画のPoetryやリンターは、開発速度を優先するため、今回は見送ることを決定"
    acceptance_criteria:
      - "`poetry install`で開発環境が構築できること。"
      - "`git commit`時にリンターとフォーマッターが自動実行されること。"
    metadata:
      related_requirement: "TASK-001"
      depends_on: []
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: chore"
        - "epic: foundation"
        - "layer: infrastructure"
        - "priority: high"

  - title: "[Task] クリーンアーキテクチャのディレクトリ構造とインターフェース定義 (TASK-002)"
    description: |
      保守性とテスト容易性の高いコードベースを維持するため、クリーンアーキテクチャに基づいたプロジェクトの骨格を実装する。(アジャイル要求リスト TASK-002 参照)
    tasks:
      - "[x] `src/wind_compass`内に、クリーンアーキテクチャのレイヤーに対応する`domain`, `use_cases`, `adapters`の各ディレクトリを作成した。"
      - "[x] `domain`レイヤーに、将来のドメインモデルのプレースホルダとして`models.py`を配置した。"
      - "[x] `use_cases`レイヤーに、データ永続化層との契約となるポート（インターフェース）を定義する`ports.py`を配置した。"
      - "[x] `ports.py`内に、抽象基底クラスとして`WindDataReader`と`PowerPlantModelReader`を定義した。"
      - "[x] 上記のアーキテクチャ定義を検証する単体テスト (`tests/test_architecture.py`) を実装した。"
    acceptance_criteria:
      - "ディレクトリ構造がチームでレビューされ、合意されていること。"
      - "リポジトリインターフェースの定義が完了していること。"
    metadata:
      related_requirement: "TASK-002"
      depends_on:
        - "TASK-001" # Dependency expressed as ID
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "epic: foundation"
        - "layer: domain"
        - "layer: usecase"
        - "layer: adapter-data"
        - "priority: high"

  - title: "[Task][Domain] コア計算ドメインモデルの実装 (TASK-003A)"
    description: |
      ユーザーストーリー`US-001`の核となる、最終確定版の計算ロジック（風車パワーカーブ、伝達効率、発電機トルク特性カーブによる回転数算出、発電機電流特性カーブによる最終電力算出）のためのドメインモデルとビジネスロジックをTDDで実装する。(アジャイル要求リスト TASK-003A 参照)
    tasks:
      - "[x] `domain/constants.py` に物理定数・変換係数（`RPM_TO_RAD_PER_SEC`）を定義"
      - "[x] 値オブジェクト (`Power`, `Energy`, `Torque`, `EffectiveWindSpeed`, `WindReading`) を `domain/models.py` に実装 (不変性、型安全性考慮)"
      - "[x] `PolynomialCurve` クラスを `domain/models.py` に実装 (多項式表現、`__post_init__`でのバリデーション含む)"
      - "[x] `PowerPlantModel` クラスを `domain/models.py` に実装 (3つの特性カーブ保持、`__post_init__`でのバリデーション含む)"
      - "[x] `PowerGenerationSimulator` ドメインサービスを `domain/services.py` に実装し、以下の計算ロジックをカプセル化:"
      - "[x]   有効風速計算ロジック (追い風の場合は0とする仕様を反映)"
      - "[x]   風車パワーカーブからのタービン電力計算ロジック"
      - "[x]   伝達効率を適用した発電機軸への伝達電力計算ロジック"
      - "[x]   トルク特性カーブを用いた発電機回転数算出ロジック (`numpy.roots`による4次方程式解法、複数解の場合は最小値選択、不適切解は0とする仕様を反映)"
      - "[x]   発電機電流特性カーブと回転数からの電流計算ロジック"
      - "[x]   電流と電圧からの最終電力計算ロジック"
      - "[x]   カットイン回転数判定ロジック"
      - "[x] 上記すべてのクラス/関数に対する単体テストを作成し、ドメインレイヤーで97.4%のカバレッジを達成 (正常系、境界値、異常系をカバー)"
    acceptance_criteria:
      - "`US-001`の`AC-01-03`をドメインレベルで満たすこと。"
      - "既知の入力パラメータセットに対する計算結果が、手計算またはリファレンス実装と一致すること。"
      - "ドメインレイヤーのテストカバレッジが95%以上であること。"
    metadata:
      related_requirement: "TASK-003A" # Also related to US-001
      depends_on:
        - "TASK-002"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "layer: domain"
        - "epic: mvp-core"
        - "principle: DDD"
        - "principle: TDD"
        - "priority: high"

  - title: "[Task][Adapter-Data] データI/Oアダプタの実装 (TASK-004)"
    description: |
      最終確定した入力データ仕様に基づき、風況データCSVファイルと設備特性コンフィグファイルを読み込むアダプタを`adapter-data`レイヤーに実装する。(アジャイル要求リスト TASK-004 参照)
    tasks:
      - "[x] `CsvWindDataReader`クラスを`adapter-data`レイヤーに実装し、`WindDataReader`ポートを実装"
      - "[x] CSV読み込みにPandasを利用し、ベクトル化演算（`to_datetime`, `astype`）でパフォーマンスを確保"
      - "[x] `JsonConfigReader`クラスを`adapter-data`レイヤーに実装し、`PowerPlantModelReader`ポートを実装"
      - "[x] JSONキーをクラス内定数として定義し、可読性と保守性を向上"
      - "[x] ファイルI/Oに関する具体的なエラー（`FileNotFoundError`, `pd.errors.ParserError`, `json.JSONDecodeError`, `KeyError`等）を適切にハンドリングする処理を実装"
      - "[x] 上記2クラスの正常系・異常系を網羅する結合テストを`pytest`で実装"
    acceptance_criteria:
      - "指定したCSV/JSONファイルから、ドメインモデルや値オブジェクトを正しく生成できること。"
      - "不正なファイル（カラム不足、型不一致など）に対するエラーハンドリングがテストされていること。"
    metadata:
      related_requirement: "TASK-004" # Also related to US-001, US-003
      depends_on:
        - "TASK-002"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: technical-task"
        - "layer: adapter-data"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 単一シナリオ実行ユースケースの実装 (US-001)"
    description: |
      ユーザーストーリー `US-001` を実現するためのユースケース（Interactor）を実装する。ドメインモデルとデータアダプタを統合し、単一シナリオのシミュレーションを実行し、結果を返す責務を持つ。(アジャイル要求リスト US-001 参照)
    tasks:
      - "単一シナリオ実行のための入力DTO（パラメータ、ファイルパス）と出力DTO（年間発電量）を定義する。"
      - "`RunSingleSimulationScenarioUseCase`を`use_cases`レイヤーに実装する。"
      - "  データアダプタを介して風況データと設備モデルをロードする。"
      - "  `PowerGenerationSimulator`ドメインサービスを呼び出して計算を実行する。"
      - "  結果を出力DTOにマッピングする。"
      - "ユースケースのユニットテストを作成する（リポジトリやドメインサービスはモック化/スタブ化する）。"
    acceptance_criteria:
      - "`US-001`の`AC-01-01`および`AC-01-02`が、CLIとの最終的な結合を除いて、ユースケースレベルで満たされていること。"
      - "ユニットテストで、ユースケースがドメインサービスやリポジトリインターフェースと正しく連携していることを確認できること。"
    metadata:
      related_requirement: "US-001"
      depends_on:
        - "TASK-003A"
        - "TASK-004"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: usecase"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 複数シナリオ実行とCLI統合 (US-002)"
    description: |
      ユーザーストーリー `US-002` を実現するため、単一シナリオ実行機能を拡張し、複数のシナリオを一括で実行できるようにする。また、CLIから操作できるように全体を統合する。(アジャイル要求リスト US-002 参照)
    tasks:
      - "`Click`ライブラリ等を用いて、コマンドライン引数（ファイルパス、複数の固定角度、複数の変速比）を解析する処理を`adapter-ui`レイヤーに実装する。(アジャイル要求リスト TASK-003B 参照)"
      - "`RunMultipleSimulationScenariosUseCase`を実装し、入力されたパラメータの全組み合わせについて`RunSingleSimulationScenarioUseCase`を呼び出す。"
      - "全シナリオの結果をマトリクス表に整形する`ConsolePresenter`クラスを`adapter-ui`レイヤーに実装する。"
      - "依存性注入（DI）コンテナ（手動またはライブラリ）をセットアップし、`main`関数ですべてのコンポーネントを結合する。"
      - "E2E（エンドツーエンド）テストを作成し、コマンド実行から結果表示までの一連の流れを確認する。"
    acceptance_criteria:
      - "`US-002`の`AC-02-01`および`AC-02-02`を満たすこと。"
      - "CLIで`-h`または`--help`オプションにより、コマンドの使い方が表示されること。"
    metadata:
      related_requirement: "US-002" # Also related to TASK-003B
      depends_on:
        - "US-001"
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: usecase"
        - "layer: adapter-ui"
        - "epic: mvp-core"
        - "priority: high"

  - title: "[UserStory] 設備モデル差し替えによる比較シミュレーション (US-003)"
    description: |
      ユーザーストーリー `US-003` を実装し、異なる設備特性コンフィグファイルを指定してシミュレーション結果を比較できるようにする。(アジャイル要求リスト US-003 参照)
    tasks:
      - "CLIで設備特性コンフィグファイルのパスを指定できることを確認する。(既存の機能で対応可能か確認)"
      - "異なるコンフィグファイル（例: 異なる係数セット）で実行した場合に、結果が変動することを確認するテスト（E2Eまたは結合テスト）を作成する。"
      - "コンフィグファイルの内容検証（必須キー、係数の数など）を`JsonConfigReader`アダプタに追加する。"
    acceptance_criteria:
      - "`US-003`の`AC-03-01`および`AC-03-02`を満たすこと。"
    metadata:
      related_requirement: "US-003"
      depends_on:
        - "US-001" # Relies on the core simulation logic and config loading
      milestone: "v0.1: MVPリリース"
      labels:
        - "type: user-story"
        - "layer: adapter-data"
        - "layer: domain"
        - "epic: mvp-core"
        - "priority: medium"

  - title: "[UserStory] 比較レポートのCSVファイル出力 (US-004)"
    description: |
      ユーザーストーリー`US-004`を実装し、シミュレーション結果をCSVファイルとして保存できるようにする。(アジャイル要求リスト US-004 参照)
    tasks:
      - "CLIに`--output-csv <filepath>`オプションを追加する。"
      - "`ConsolePresenter`（または新しい`CsvPresenter`）に、結果をCSV形式で指定されたファイルパスに書き出す機能を追加する。"
      - "オプションが指定された場合のみ、ファイルが出力されることを確認するE2Eテストを追加する。"
    acceptance_criteria:
      - "`US-004`の`AC-04-01`および`AC-04-02`を満たすこと。"
    metadata:
      related_requirement: "US-004"
      depends_on:
        - "US-002"
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story"
        - "layer: adapter-ui"
        - "epic: reporting"
        - "priority: medium"

  - title: "[Spike] グラフ描画ライブラリの調査・選定 (US-005関連)"
    description: |
      ユーザーストーリー`US-005`で求められるグラフ描画機能を実現するため、最適なPythonライブラリを調査・選定する。(アジャイル要求リスト (旧)TASK-005 / US-005 参照)
    tasks:
      - "`Matplotlib`, `Seaborn`, `Plotly`などの候補ライブラリをリストアップする。"
      - "レーダーチャートと棒グラフの描画が容易か評価する。"
      - "画像ファイルとしての出力が簡単か、依存関係は重すぎないか評価する。"
      - "簡単なプロトタイプを作成し、チームにデモを行い、選定結果をドキュメント化する。"
    acceptance_criteria:
      - "チームが、`US-005`を実装するための技術選定に合意できること。"
      - "選定理由と簡単な使い方がドキュメント化されていること。"
    metadata:
      related_requirement: "US-005" # Relates to US-005
      depends_on: []
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: spike"
        - "epic: reporting"
        - "status: needs-discussion"
        - "priority: medium"

  - title: "[UserStory] 比較レポートのグラフ画像出力 (US-005)"
    description: |
      ユーザーストーリー`US-005`を実装し、シミュレーション結果をグラフ画像として保存できるようにする。(アジャイル要求リスト US-005 参照)
    tasks:
      - "(前提) `[Spike] グラフ描画ライブラリの調査・選定` が完了していること。"
      - "CLIに`--output-graph <filepath>`オプションと、グラフタイプ（例: `--graph-type radar/bar`）オプションを追加する。"
      - "`Presenter`（または新しい`GraphPresenter`）に、結果を選定したライブラリでグラフ化し、指定されたファイルパスに画像として保存する機能を追加する。"
      - "オプションが指定された場合のみ、ファイルが出力されることを確認するE2Eテストを追加する。"
    acceptance_criteria:
      - "`US-005`の`AC-05-01`および`AC-05-02`を満たすこと。"
    metadata:
      related_requirement: "US-005"
      depends_on:
        - "US-002"
        - "[Spike] グラフ描画ライブラリの調査・選定 (US-005関連)"
      milestone: "v0.2: レポート機能強化"
      labels:
        - "type: user-story"
        - "layer: adapter-ui"
        - "epic: reporting"
        - "priority: medium"

  - title: "[Task] 性能ベンチマークテストの作成と実施 (TASK-005)"
    description: |
      1年分（約5万行）のダミーデータと16シナリオのテストケースを作成し、CI/CDパイプラインに組み込み、定期的に実行して性能劣化を検知できるようにする。(アジャイル要求リスト TASK-005 参照)
    tasks:
      - "性能測定用のベンチマークスクリプトを作成する。"
      - "1年分の現実的なダミー風況データと、複数の設備特性コンフィグファイルを作成する。"
      - "CI環境でベンチマークテストを実行し、実行時間を記録・比較できるようにする。"
      - "性能要件（例: 60秒以内）をクリアしていることを確認する。"
    acceptance_criteria:
      - "ベンチマークテストがCIで自動実行されること。"
      - "設定された性能目標をクリアしていること。"
    metadata:
      related_requirement: "TASK-005" # This is the ID from the Agile Requirements List
      depends_on:
        - "US-002" # Needs multiple scenario execution to be benchmarked
      milestone: "継続的改善 (Continuous Improvement)"
      labels:
        - "type: technical-task"
        - "layer: infrastructure"
        - "epic: foundation"
        - "priority: medium"