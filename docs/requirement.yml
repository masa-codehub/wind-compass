# -----------------------------------------------------------------------------
# 要件定義書: wind-compass
# Version: 1.0
# -----------------------------------------------------------------------------

project_name: "wind-compass"
version: "1.0"

# 1. 概要と背景 (※柔らかい表現)
overview_and_background:
  purpose: >
    風力発電機をどこに設置するか考えるとき、どの向きに置くか、どんな部品（変速比など）を使うかは、年間の発電量に大きく影響します。
  problem_to_solve: >
    この「wind-compass」プロジェクトは、手元にある風のデータと、いくつかの簡単な設定を使ってシミュレーションを行い、
    「だいたいどれくらい発電しそうか」「設置する価値があるか」といった、おおよその当たりをつけるためのツールを開発します。

# 2. システム化の目的とゴール (※柔らかい表現)
system_purpose_and_goals:
  purpose: >
    利用者が、いくつかの設置パターンや設定の組み合わせについて、発電量がどう変わるかを気軽に試せる（what-if分析）環境を提供します。
  success_criteria:
    - いろいろなシナリオ（設置方角・変速比の組み合わせ）で、年間の発電量がどれくらいになるかを簡単に計算し、比較できること。
    - 風車や発電機の性能モデル（計算式の係数など）を、外部の設定ファイルで手軽に入れ替えて試せること。
    - 1年分のデータを使った計算が、ストレスなく待てる時間で終わること。

# 3. スコープ定義 (※技術的に明確な表現)
scope_definition:
  in_scope:
    - 指定された風況データファイルおよび設備特性コンフィグファイルの読み込み。
    - 複数の「固定角度」と「変速比」の組み合わせシナリオに基づいた、年間発電量のシミュレーション計算。
    - 全シナリオの計算結果を一覧できる、比較レポート（マトリクス表・グラフ）の生成。
  out_of_scope:
    - 風車の風向追従（ヨーイング）機能のシミュレーション。
    - 複数風車間の相互影響（ウェイク効果）の考慮。
    - 発電コストや売電価格などを含めた、詳細な経済性評価。
    - 気象データの取得や予測。

# 4. 主要なステークホルダーと役割 (※期待の部分のみ柔らかい表現)
stakeholders_and_roles:
  - role: "データ分析者 / 研究者"
    description: >
      本システムの主たるアクター（利用者）。風況データや設備モデルを用意し、本システムを用いてシミュレーションを実行し、結果を分析する。
    expectation: >
      複雑な計算を手でやる代わりに、このツールで手軽にいろいろなパターンを試してみたい。
    ddd_note: >
      本システムのドメインエキスパート。ユビキタス言語の形成に不可欠。
  - role: "発電事業者 / 投資家"
    description: >
      本システムのステークホルダー。シミュレーション結果を、事業計画や投資判断の参考情報として利用する。
    expectation: >
      データに基づいた、判断材料のひとつとなるような発電量の予測情報が欲しい。

# 5. ユースケース定義 (※技術的に明確な表現)
use_cases:
  # Clean Architecture Note: 以下のユースケースはアプリケーションの中核ロジック（Interactor）として実装されるべき。
  - name: "複数シナリオの発電量シミュレーションを実行し、比較レポートを取得する"
    actor: "データ分析者 / 研究者"
    preconditions:
      - 風況データファイル（CSVなど）が用意されている。
      - 設備特性コンフィグファイル（JSONなど）が用意されている。
    postconditions:
      - 指定された全シナリオの年間発電量が計算される。
      - 結果が比較レポートとして出力される。
    basic_flow: |
      1. 利用者が、本システムの実行を指示する。
      2. 利用者は、入力として「風況データファイル」「設備特性コンフィグファイル」のパスを指定する。
      3. 利用者は、分析したいシナリオとして「風車の固定角度（16方位から複数）」および「変速比（複数）」を指定する。
      4. システムは、指定されたファイルを読み込み、妥当性を検証する。
      5. システムは、指定された全シナリオの組み合わせ分のシミュレーションタスクを生成する。
      6. 各タスクにおいて、システムは時系列データを一行ずつ処理し、発電量を算出する。
      7. システムは、全シナリオの年間総発電量を集計する。
      8. システムは、結果を比較レポートとして出力する。
    alternative_flows:
      - "ファイルが存在しない場合、エラーメッセージを表示して終了する。"
      - "ファイルのフォーマットが不正な場合、エラー箇所を明記したメッセージを表示して終了する。"
      - "計算処理中に予期せぬ問題が発生した場合、エラーとなったシナリオと原因を記録し、可能な限り他のシナリオの計算を続行する。"

# 6. ドメインモデル（初期案） (※技術的に明確な表現)
domain_model_initial_draft:
  # DDD Note: 以下の概念はドメイン層の中心に配置し、ユビキタス言語を用いて命名する。
  aggregates:
    - name: "SimulationBatch"
      description: "一回の実行リクエスト全体を表す集約。複数のSimulationScenarioを内包する。"
    - name: "SimulationScenario"
      description: "「固定角度」と「変速比」の一意な組み合わせ。計算の単位となり、結果を保持する。"
  value_objects:
    - name: "WindReading"
      description: "時刻、風速、方位を持つ測定値。"
    - name: "PowerPlantModel"
      description: "風車パワーカーブ、発電機特性などを保持する設備モデル。"
    - name: "SimulationParameters"
      description: "風車固定角度、変速比を持つパラメータ。"
    - name: "EffectiveWindSpeed"
      description: "角度補正後の有効風速。計算ロジックを内包する。"
    - name: "Power / Energy"
      description: "値と単位を持つ電力・電力量。"
  domain_services:
    - name: "PowerCalculationService"
      description: "有効風速と設備モデルから、ある瞬間の電力を計算する責務を持つ。"
  ubiquitous_language_candidates:
    - "シナリオ"
    - "バッチ"
    - "風況データ"
    - "設備モデル"
    - "変速比"
    - "固定角度"
    - "有効風速"
    - "年間発電量"
    - "比較レポート"

# 7. 機能要件 (※技術的に明確な表現)
functional_requirements:
  # TDD Note: 各機能は独立してテスト可能であるべき。
  - id: "FR-001"
    name: "データ入力機能"
    details:
      - "指定されたパスから、風況データファイル（CSV形式）を読み込めること。"
      - "指定されたパスから、設備特性コンフィグファイル（JSON形式）を読み込めること。"
      - "ファイルの必須項目が不足している場合、エラーを検知できること。"
  - id: "FR-002"
    name: "シナリオ設定機能"
    details:
      - "分析対象とする風車の固定角度を、16方位の中から複数指定できること。"
      - "分析対象とする変速比を、数値で複数指定できること。"
  - id: "FR-003"
    name: "計算エンジン機能"
    details:
      - "風速(V)、風向、風車の固定角度から、有効風速 V_eff = V * cos(θ) を正しく計算できること。"
      - "風が後ろから当たる場合、有効風速は0として扱われること。"
      - "コンフィグファイルから読み込んだ多項式モデルに基づき、各種計算を実行できること。"
  - id: "FR-004"
    name: "レポート出力機能"
    details:
      - "全シナリオ（固定角度×変速比）の年間発電量をまとめたマトリクス表をテキスト形式で出力できること。"
      - "（オプション）上記マトリクス表をCSVファイルとして出力できること。"
      - "（オプション）結果を比較するグラフを画像ファイルとして出力できること。"

# 8. 非機能要件 (※技術的に明確な表現)
non_functional_requirements:
  performance: "1年分の風況データ（約52,560行）と16シナリオの組み合わせについて、全体の計算処理が60秒以内に完了すること。"
  availability: "デスクトップで実行されるコマンドラインツール（CLI）を想定しており、常時稼働は要求されない。"
  security: "外部サービスとの通信はなく、ローカルファイルの読み書きに関する標準的なセキュリティに準拠すること。"
  maintainability_and_extensibility:
    # Clean Architecture Note: 疎結合と関心事の分離を徹底する。
    # DDD Note: 新しいビジネスルールの追加が容易であること。
    description: |
      ドメイン層はUI層・インフラ層から完全に分離する。
      ファイルI/Oやレポート生成の実装はインターフェースを介して利用し、差し替え可能にする。
      新たな特性式モデルの追加が容易な設計（ストラテジーパターンなど）を採用する。
  testability:
    # TDD Note: テストのしやすさを最優先する。
    description: |
      ドメイン層のロジックは、外部依存のない純粋なクラス/関数として実装し、高いユニットテストカバレッジを目指す。
  ui_ux:
    description: |
      コマンドラインインターフェース（CLI）として実装する。
      ヘルプ機能（-h, --help）を提供する。
      処理の進捗がわかるように、適切なログを出力する。

# 9. 受け入れ基準 (※技術的に明確な表現)
acceptance_criteria:
  # TDD Note: これらの基準は自動受け入れテストのシナリオとなる。
  - use_case_id: "UC-001"
    name: "複数シナリオのシミュレーション"
    criteria:
      - id: "AC-001-01"
        scenario: |
          Given: 正しい風況データと設備コンフィグファイルが存在する。
          When: 利用者が固定角度「北」、変速比「5」を指定して実行する。
          Then: 計算が正常に完了し、一つのシナリオ結果を含むレポートが出力される。
      - id: "AC-001-02"
        scenario: |
          Given: 正しい風況データと設備コンフィグファイルが存在する。
          When: 利用者が固定角度「北, 東」、変速比「5, 8」を指定して実行する。
          Then: 合計4シナリオの計算結果を含むマトリクス表が出力される。
      - id: "AC-001-03"
        scenario: |
          Given: 風況データファイルのパスが間違っている。
          When: 利用者がシステムを実行する。
          Then: 「ファイルが見つかりません」というエラーメッセージが表示され、処理が終了する。

# 10. 用語集 (※技術的に明確な表現)
glossary:
  # DDD Note: プロジェクトのユビキタス言語を定義する。
  - term: "シナリオ"
    english: "SimulationScenario"
    description: "特定の「固定角度」と「変速比」の組み合わせ。シミュレーションの最小実行単位。"
  - term: "固定角度"
    english: "TurbineAngle"
    description: "風車を固定して設置する方位（16方位）。"
  - term: "変速比"
    english: "GearRatio"
    description: "風車の回転数と発電機の回転数を変換する比率。"
  - term: "風況データ"
    english: "WindReading"
    description: "ある時刻における風速と風向を記録したデータ。"
  - term: "有効風速"
    english: "EffectiveWindSpeed"
    description: "風車の回転面に実際に作用する、角度補正後の風速。"

# 11. 制約条件・前提条件 (※技術的に明確な表現)
constraints_and_assumptions:
  execution_environment: "主要なOS（Windows, macOS, Linux）で動作するスタンドアロンアプリケーションとする。"
  development_language: "Python 3.9以降（または他のモダンな言語、要合意）。"
  libraries:
    - "Pandas（データ処理）"
    - "PyYAML / Tomli（設定ファイル読み込み）"
    - "Click / Argparse（CLI構築）"
  data_format_assumption: "風況データはCSV、設備特性コンフィグはJSON形式を初期バージョンでは必須とする。"

# -----------------------------------------------------------------------------
# 設計・開発に向けた確認事項
# -----------------------------------------------------------------------------
questions_for_clarification:
  - category: "UI/UX"
    question: "今は黒い画面（CLI）で使うイメージですが、将来的にはマウスで操作できる画面（GUI）やWebページで見られるようにしたい、といった考えはありますか？"
  - category: "データフォーマットの具体的なお話"
    question: "風のデータ（CSV）は、具体的にどんな列（カラム名など）がありますか？また、設備の設定ファイルには、どんな項目をどんな名前で書けると使いやすいか、イメージはありますか？"
  - category: "エラーの時の動き"
    question: "もし風のデータに、ところどころ値が入っていない（欠損値）部分があったら、どう動くのが親切でしょうか？ (A: エラーで止める, B: その行は無視して計算, C: 前後の値から補う)"
  - category: "レポートの形式"
    question: "結果の表やグラフは、画面に出るだけで十分ですか？それとも、CSVや画像ファイルとして保存できる機能は、ぜひ欲しい機能でしょうか？"